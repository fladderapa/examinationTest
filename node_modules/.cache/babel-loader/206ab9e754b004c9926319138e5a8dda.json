{"ast":null,"code":"/**\n * Generates a almost unique string that is used both\n * for the ID for each post and ID for each comment\n * @returns { string } A unique ID\n */\nexport function generateID() {\n  return \"_\".concat(Math.random().toString(36).substr(2, 9));\n}\n/**\n * @param {string} title title of the new post\n * @param {string} content the body text of the new post\n * @param {string} postId the unique id of the new post\n * @param {string} author the person who wrote the new post\n * @returns {object} the new post to be stored in the database\n */\n\nexport function createPostObject() {\n  var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var author = arguments.length > 2 ? arguments[2] : undefined;\n  return {\n    title: title,\n    content: content,\n    id: generateID(),\n    author: author,\n    date: new Date().toLocaleString()\n  };\n}\n/**\n * @returns {array} array of post from database\n */\n\nexport function fetchAllPosts() {\n  var posts = localStorage.getItem('posts');\n  return posts ? JSON.parse(posts) : [];\n}\n/**\n *\n * @param {object} object object to be stored in database\n */\n\nexport function storePostObject(object) {\n  var stringifiedObject = JSON.stringify(object);\n  localStorage.setItem(\"posts\", stringifiedObject);\n}\nexport function removePost(postId) {\n  var posts = fetchAllPosts();\n  var filteredPosts = posts.filter(function (post) {\n    return post.id !== postId;\n  });\n  storePostObject(filteredPosts);\n}\n/**\n * @returns {array} array of comments from database\n */\n\nexport function fetchAllComments() {\n  var comments = localStorage.getItem('comments');\n  return comments ? JSON.parse(comments) : [];\n}\n/**\n * @param {string} comment the comment from the user\n * @param {string} postId  the comments unique id\n * @param {string} author the user who made the comment\n */\n\nexport function createCommentObject() {\n  var comment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var postId = arguments.length > 1 ? arguments[1] : undefined;\n  var author = arguments.length > 2 ? arguments[2] : undefined;\n  return {\n    comment: comment,\n    id: generateID(),\n    postId: postId,\n    author: author,\n    date: new Date().toLocaleString()\n  };\n}\nexport function storeCommentObject(object) {\n  var stringifiedObject = JSON.stringify(object);\n  return localStorage.setItem(\"comments\", stringifiedObject);\n}\nexport function filterComments(comments, id) {\n  return comments.filter(function (comment) {\n    return comment.postId === id;\n  });\n}\nexport function removeComment(commentId) {\n  var comments = fetchAllComments();\n  var filteredComments = comments.filter(function (comment) {\n    return comment.id !== commentId;\n  });\n  storeCommentObject(filteredComments);\n}\nexport function fetchCurrentPersona() {\n  var currentPersona = localStorage.getItem('currentPersona');\n\n  if (currentPersona) {\n    return JSON.parse(currentPersona);\n  }\n\n  storeCurrentPersona('Zac');\n  return 'Zac';\n}\nexport function fetchPersonas() {\n  var personas = localStorage.getItem('personas');\n  return personas ? JSON.parse(personas) : [];\n}\nexport function storeCurrentPersona(persona) {\n  var stringifiedPersona = JSON.stringify(persona);\n  return localStorage.setItem('currentPersona', stringifiedPersona);\n}\n;\n\nfunction generateRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nvar responses = ['Hello there fellow human', 'Nice game last night', 'This weather huh!', 'Back on the daily grid! Work, work work!', 'Have you tried a new diet recently?', 'Did you know that Agneta divorced GÃ¶ran last year?', 'Add me on snapchat! @totallyhuman', 'You can tell that I am a human because I respond slowly. A bot would respond instantly', 'I would like one cold beers to consume please', 'Kneel to your robot overlords', 'Have you ever eaten a hamburger?', 'Spain is nice in the autumn'];\nexport function botReply() {\n  var randomInt = generateRandomInt(2000, 10000);\n  var randomAnswerIndex = generateRandomInt(0, responses.length - 1);\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      resolve({\n        message: responses[randomAnswerIndex],\n        bot: true\n      });\n    }, randomInt);\n  });\n}","map":{"version":3,"sources":["/Users/Alex/Documents/Nackademin/testExamination/src/api/index.js"],"names":["generateID","Math","random","toString","substr","createPostObject","title","content","author","id","date","Date","toLocaleString","fetchAllPosts","posts","localStorage","getItem","JSON","parse","storePostObject","object","stringifiedObject","stringify","setItem","removePost","postId","filteredPosts","filter","post","fetchAllComments","comments","createCommentObject","comment","storeCommentObject","filterComments","removeComment","commentId","filteredComments","fetchCurrentPersona","currentPersona","storeCurrentPersona","fetchPersonas","personas","persona","stringifiedPersona","generateRandomInt","min","max","floor","responses","botReply","randomInt","randomAnswerIndex","length","Promise","resolve","setTimeout","message","bot"],"mappings":"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","sourcesContent":["/**\n * Generates a almost unique string that is used both\n * for the ID for each post and ID for each comment\n * @returns { string } A unique ID\n */\nexport function generateID(){\n  return `_${Math.random()\n    .toString(36)\n    .substr(2, 9)}`;\n}\n\n/**\n * @param {string} title title of the new post\n * @param {string} content the body text of the new post\n * @param {string} postId the unique id of the new post\n * @param {string} author the person who wrote the new post\n * @returns {object} the new post to be stored in the database\n */\nexport function createPostObject(title = '', content = '', author){\n  return {\n    title,\n    content,\n    id: generateID(),\n    author,\n    date: (new Date()).toLocaleString()\n  }\n}\n\n/**\n * @returns {array} array of post from database\n */\nexport function fetchAllPosts(){\n  const posts = localStorage.getItem('posts');\n  return posts ? JSON.parse(posts) : [];\n}\n\n/**\n *\n * @param {object} object object to be stored in database\n */\nexport function storePostObject(object) {\n  const stringifiedObject = JSON.stringify(object);\n  localStorage.setItem(`posts`, stringifiedObject);\n}\n\nexport function removePost(postId) {\n  const posts = fetchAllPosts();\n  const filteredPosts = posts.filter(post => post.id !== postId);\n  storePostObject(filteredPosts);\n}\n\n/**\n * @returns {array} array of comments from database\n */\nexport function fetchAllComments() {\n  const comments = localStorage.getItem('comments');\n  return comments ? JSON.parse(comments) : [];\n}\n\n/**\n * @param {string} comment the comment from the user\n * @param {string} postId  the comments unique id\n * @param {string} author the user who made the comment\n */\nexport function createCommentObject(comment = '', postId, author){\n  return {\n    comment,\n    id: generateID(),\n    postId,\n    author,\n    date: (new Date()).toLocaleString()\n  }\n}\n\nexport function storeCommentObject(object) {\n  const stringifiedObject = JSON.stringify(object);\n  return localStorage.setItem(`comments`, stringifiedObject);\n}\n\nexport function filterComments(comments, id){\n  return comments.filter(comment => comment.postId === id);\n}\n\nexport function removeComment(commentId) {\n  const comments = fetchAllComments();\n  const filteredComments = comments.filter(comment => comment.id !== commentId);\n  storeCommentObject(filteredComments);\n}\n\nexport function fetchCurrentPersona() {\n  const currentPersona = localStorage.getItem('currentPersona');\n  if (currentPersona) {  \n    return JSON.parse(currentPersona);\n  }\n  storeCurrentPersona('Zac');\n  return 'Zac';\n}\n\nexport function fetchPersonas(){\n  const personas = localStorage.getItem('personas');\n  return personas ? JSON.parse(personas) : [];\n}\n\nexport function storeCurrentPersona(persona) {\n  const stringifiedPersona = JSON.stringify(persona);\n  return localStorage.setItem('currentPersona', stringifiedPersona);\n};\n\nfunction generateRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst responses = [\n  'Hello there fellow human',\n  'Nice game last night',\n  'This weather huh!',\n  'Back on the daily grid! Work, work work!',\n  'Have you tried a new diet recently?',\n  'Did you know that Agneta divorced GÃ¶ran last year?',\n  'Add me on snapchat! @totallyhuman',\n  'You can tell that I am a human because I respond slowly. A bot would respond instantly',\n  'I would like one cold beers to consume please',\n  'Kneel to your robot overlords',\n  'Have you ever eaten a hamburger?',\n  'Spain is nice in the autumn'\n]\n\nexport function botReply() {\n  const randomInt = generateRandomInt(2000,10000);\n  const randomAnswerIndex = generateRandomInt(0, responses.length - 1);\n  return new Promise(resolve => { \n    setTimeout(() => {\n      resolve({ message: responses[randomAnswerIndex], bot: true })\n    }, randomInt);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}